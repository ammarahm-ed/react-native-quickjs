import groovy.json.JsonSlurper
import org.apache.tools.ant.taskdefs.condition.Os

def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

def getNodeExecutable() {
  return rootProject.getProperties().get("nodeExecutablePath") ?: "node"
}

def findNodePackageDir(String packageName, boolean absolute = true) {
  def nodeCommand = [getNodeExecutable(), "--print", "require.resolve('${packageName}/package.json')"]
  def proc = nodeCommand.execute(null, rootDir)
  def error = proc.err.text
  if (error) {
    throw new GradleException("findNodePackageDir() execution failed - nodeCommand[${nodeCommand.join(' ')}]\n" + error)
  }
  def dir = new File(proc.text.trim()).getParentFile()
  return absolute ? dir.getAbsoluteFile() : dir
}

apply plugin: "com.android.library"

def reactNativeDir = findNodePackageDir("react-native")
def reactNativeManifest = file("${reactNativeDir}/package.json")
def reactNativeManifestAsJson = new JsonSlurper().parseText(reactNativeManifest.text)
def reactNativeVersion = reactNativeManifestAsJson.version as String
def (major, minor, patch) = reactNativeVersion.tokenize('.')
def rnMinorVersion = Integer.parseInt(minor)

if (appProject?.ext?.react?.enableHermes) {
  throw new GradleException("Please disable Hermes because Hermes will transform the JavaScript bundle as bytecode bundle.\n")
}

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["Quickjs_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["Quickjs_" + name]).toInteger()
}

def toPlatformFileString(File path) {
  def result = path.toString()
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    result = result.replace(File.separatorChar, '/' as char)
  }
  return result
}

android {
  ndkVersion getExtOrDefault("ndkVersion")
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    externalNativeBuild {
      cmake {
        cppFlags "-frtti -fexceptions -Wall -fstack-protector-all"
        // cppFlags "-O2 -flto -frtti -fexceptions -Wall -fstack-protector-all"
        abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        arguments "-DANDROID_STL=c++_shared",
            "-DREACT_NATIVE_DIR=${toPlatformFileString(reactNativeDir)}",
            "-DREACT_NATIVE_TARGET_VERSION=${rnMinorVersion}",
            "-DENABLE_HASH_CHECK=0"
      }
    }
  }
  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android.txt')
      externalNativeBuild {
        cmake {
          cppFlags "-O2 -frtti -fexceptions -Wall"
        }
      }
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  packagingOptions {
    // Uncomment to keep debug symbols
    doNotStrip "**/*.so"
    excludes += [
        "**/libc++_shared.so",
        "**/libfbjni.so",
        "**/libjsi.so",
        "**/libfolly_runtime.so",
        "**/libglog.so",
        "**/libreactnativejni.so",
        "**/libjsinspector.so",
        "**/libruntimeexecutor.so",
    ]
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  buildFeatures {
    prefab true
  }
}

task cleanCmakeCache() {
  tasks.getByName("clean").dependsOn(cleanCmakeCache)
  doFirst {
    delete "${projectDir}/.cxx"
  }
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.yoga:proguard-annotations:1.19.0"
  compileOnly "com.facebook.fbjni:fbjni:0.3.0"
  implementation "com.facebook.react:react-android"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "Quickjs"
    codegenJavaPackageName = "com.quickjs"
  }
}
